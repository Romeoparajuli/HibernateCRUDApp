package com.romeo.Main.Entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * This class represents the User entity that maps to a database table using Hibernate.
 * It contains annotations for object-relational mapping (ORM) and defines the structure of the `user` table.
 */
@Entity // Specifies that this class is an entity and is mapped to a database table.
@Table  // Marks this class as a table. By default, the table name is derived from the class name.
public class User {

    @Id // Specifies the primary key of the table.
    @Column // Indicates that this field is a column in the table.
    @GeneratedValue(strategy = GenerationType.IDENTITY) 
    // Specifies that the primary key value is auto-generated by the database (commonly used with MySQL's AUTO_INCREMENT).
    private int id;

    @Column // Maps this field to a column in the table. Default column name will be the same as the field name.
    private String name;

    @Column // Maps this field to a column. Used for storing the user's email.
    private String email;

    @Column // Maps this field to a column. Used for storing the user's phone number.
    private String phone;

    @Column // Maps this field to a column. Used for storing the user's password.
    private String password;

    @Column // Maps this field to a column. Used for storing the user's gender.
    private String gender;

    @Column // Maps this field to a column. Used for storing the user's city.
    private String city;

    /**
     * Default no-argument constructor.
     * Required by Hibernate to create objects through reflection.
     */
    public User() {
    }

    /**
     * Getter for the `id` field.
     * @return the unique ID of the user.
     */
    public int getId() {
        return id;
    }

    /**
     * Setter for the `id` field.
     * @param id the unique ID to set.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Getter for the `name` field.
     * @return the name of the user.
     */
    public String getName() {
        return name;
    }

    /**
     * Setter for the `name` field.
     * @param name the name to set for the user.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for the `email` field.
     * @return the email of the user.
     */
    public String getEmail() {
        return email;
    }

    /**
     * Setter for the `email` field.
     * @param email the email to set for the user.
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for the `phone` field.
     * @return the phone number of the user.
     */
    public String getPhone() {
        return phone;
    }

    /**
     * Setter for the `phone` field.
     * @param phone the phone number to set for the user.
     */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /**
     * Getter for the `password` field.
     * @return the password of the user.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Setter for the `password` field.
     * @param password the password to set for the user.
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Getter for the `gender` field.
     * @return the gender of the user.
     */
    public String getGender() {
        return gender;
    }

    /**
     * Setter for the `gender` field.
     * @param gender the gender to set for the user.
     */
    public void setGender(String gender) {
        this.gender = gender;
    }

    /**
     * Getter for the `city` field.
     * @return the city of the user.
     */
    public String getCity() {
        return city;
    }

    /**
     * Setter for the `city` field.
     * @param city the city to set for the user.
     */
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Overridden `toString` method to provide a string representation of the User object.
     * Useful for debugging and logging.
     * @return a string representation of the User object.
     */
    @Override
    public String toString() {
        return "User [id=" + id + ", name=" + name + ", email=" + email + ", phone=" + phone + ", password=" + password
                + ", gender=" + gender + ", city=" + city + "]";
    }
}
